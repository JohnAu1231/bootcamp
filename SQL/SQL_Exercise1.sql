CREATE DATABASE BOOTCAMP_EXERCISE1;
USE BOOTCAMP_EXERCISE1;
DROP DATABASE BOOTCAMP_EXERCISE1;

CREATE TABLE regions (
	REGION_ID INTEGER PRIMARY KEY AUTO_INCREMENT,
    REGION_NAME VARCHAR(25)
);
CREATE TABLE countries (
	COUNTRY_ID VARCHAR(2) PRIMARY KEY,
    COUNTRY_NAME VARCHAR(40),
    REGION_ID INTEGER,
    CONSTRAINT FK_ReigonOrder FOREIGN KEY (REGION_ID) REFERENCES regions(REGION_ID)
);
CREATE TABLE locations (
	LOCATION_ID INTEGER PRIMARY KEY AUTO_INCREMENT,
    STREET_ADDRESS VARCHAR(25),
    POSTAL_CODE VARCHAR(12),
    CITY VARCHAR(30),
    STATE_PROVINCE VARCHAR(12),
    COUNTRY_ID VARCHAR(2),
    CONSTRAINT FK_CountryOrder FOREIGN KEY (COUNTRY_ID) REFERENCES countries(COUNTRY_ID)
);
CREATE TABLE departments (
	DEPARTMENT_ID INTEGER PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR(30),
    MANAGER_ID INTEGER,
    LOCATION_ID INTEGER,
    CONSTRAINT FK_LocationOrder FOREIGN KEY (LOCATION_ID) REFERENCES locations(LOCATION_ID)
);

CREATE TABLE jobs (
	JOB_ID VARCHAR(10) PRIMARY KEY,
    JOB_TITLE VARCHAR(25),
    MIN_SALARY INTEGER,
    MAX_SALARY INTEGER
);
CREATE TABLE job_history (
	EMPLOYEE_ID INTEGER,
    START_DATE DATE,
    END_DATE DATE,
    JOB_ID VARCHAR(20),
    DEPARTMENT_ID INTEGER,
    PRIMARY KEY (EMPLOYEE_ID, START_DATE),
    CONSTRAINT FK_JobDepartmentOrder FOREIGN KEY(DEPARTMENT_ID) REFERENCES departments(DEPARTMENT_ID),
	CONSTRAINT FK_JHOrder FOREIGN KEY (JOB_ID) REFERENCES jobS(JOB_ID)
);
CREATE TABLE employees (
	EMPLOYEE_ID INTEGER PRIMARY KEY AUTO_INCREMENT,
    FIRST_NAME VARCHAR(20),
    LAST_NAME VARCHAR(25),
    EMAIL VARCHAR(25),
    PHONE_NUMBER VARCHAR(20),
    HIRE_DATE DATE,
    JOB_ID VARCHAR(20),
    SALARY INTEGER,
    COMMISSION_PCT INTEGER,
    MANAGER_ID INTEGER,
    DEPARTMENT_ID INTEGER,
    CONSTRAINT FK_DepartmentOrder FOREIGN KEY (DEPARTMENT_ID) REFERENCES departments(DEPARTMENT_ID),
    CONSTRAINT FK_JobOrder FOREIGN KEY (JOB_ID) REFERENCES jobs(JOB_ID),
	CONSTRAINT FK_EmployeeOrder FOREIGN KEY (EMPLOYEE_ID) REFERENCES job_history(EMPLOYEE_ID)
);


-- REGIONS
INSERT INTO regions (REGION_ID, REGION_NAME) VALUES
(1, 'North America'),
(2, 'Europe'),
(3, 'Asia');

-- COUNTRIES
INSERT INTO countries (COUNTRY_ID, COUNTRY_NAME, REGION_ID) VALUES
(1, 'United States', 1),
(2, 'United Kingdom', 2),
(3, 'Japan', 3);

-- LOCATIONS
INSERT INTO locations (LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID) VALUES
(1001, '123 Main St', '12345', 'New York', 'NY', 1),
(1002, '456 Elm St', '67890', 'London', NULL, 2),
(1003, '789 Oak St', '98765', 'Tokyo', NULL, 3);

-- DEPARTMENTS
INSERT INTO departments (DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID) VALUES
(10, 'Sales', 101, 1001),
(20, 'HR', 102, 1002),
(30, 'IT', 103, 1003);

-- JOBS
INSERT INTO jobs (JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY) VALUES
('SALESMAN', 'Salesman', 30000, 60000),
('HR_REP', 'HR Representative', 35000, 70000),
('IT_PROG', 'IT Programmer', 40000, 80000);

-- JOB_HISTORY
INSERT INTO job_history (START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID, EMPLOYEE_ID) VALUES
('2023-01-15', '2023-05-15', 'SALESMAN', 10, 101),
('2023-02-20', '2023-06-20', 'HR_REP', 20, 102),
('2023-03-25', NULL, 'IT_PROG', 30, 103);
INSERT INTO  job_history (START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID, EMPLOYEE_ID) VALUES
('2023-02-01', '2023-03-03', 'IT_PROG', 30, 103),
('2023-01-01', '2023-01-03', 'IT_PROG', 30, 103);
INSERT INTO  job_history (START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID, EMPLOYEE_ID) VALUES
('2023-01-01', '2023-02-10', 'HR_REP', 20, 102);
INSERT INTO  job_history (START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID, EMPLOYEE_ID) VALUES
('2022-01-01', '2022-02-10', 'HR_REP', 30, 102);


-- EMPLOYEES
INSERT INTO employees (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID) VALUES
(101, 'John', 'Doe', 'john@example.com', '123-456-7890', '2023-01-15', 'SALESMAN', 50000, 0.05, 103, 10),
(102, 'Jane', 'Smith', 'jane@example.com', '987-654-3210', '2023-02-20', 'HR_REP', 55000, 0.07, 103, 20),
(103, 'Michael', 'Johnson', 'michael@example.com', '555-123-4567', '2023-03-25', 'IT_PROG', 60000, 0.06, 103,30);

-- Answer
-- 3.
SELECT l.LOCATION_ID, l.STREET_ADDRESS, l.CITY, l.STATE_PROVINCE, c.COUNTRY_NAME 
FROM locations l
LEFT JOIN countries c ON c.COUNTRY_ID = l.COUNTRY_ID;

-- 4.
SELECT FIRST_NAME, LAST_NAME, DEPARTMENT_ID
FROM employees;

-- 5.
SELECT e.FIRST_NAME, e.LAST_NAME, e.JOB_ID, e.DEPARTMENT_ID
FROM employees e
LEFT JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
LEFT JOIN locations l ON  d.LOCATION_ID = l.LOCATION_ID
LEFT JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID
WHERE UPPER(c.COUNTRY_NAME) LIKE UPPER('Japan');

-- 6.
WITH manager AS(
	SELECT e.EMPLOYEE_ID, e.LAST_NAME
    FROM employees e
    WHERE e.EMPLOYEE_ID IN (SELECT d.MANAGER_ID FROM departments d)
)
SELECT e.EMPLOYEE_ID, e.LAST_NAME, e.MANAGER_ID, m.LAST_NAME
FROM employees e LEFT JOIN manager m ON e.MANAGER_ID = m.EMPLOYEE_ID;

-- 7.
WITH after AS (
	SELECT HIRE_DATE AS JOHN_DATE
    FROM employees
    WHERE LAST_NAME = 'Doe' AND FIRST_NAME = 'John'
)
SELECT FIRST_NAME, LAST_NAME, HIRE_DATE
FROM employees
WHERE HIRE_DATE > ALL(SELECT JOHN_DATE FROM after);

-- 8.
SELECT DEPARTMENT_NAME, COUNT(*)
FROM employees e 
LEFT JOIN departments d ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
GROUP BY e.DEPARTMENT_ID;

-- 9.
WITH job_30 AS(
	SELECT EMPLOYEE_ID, DATEDIFF(COALESCE(END_DATE, NOW()), COALESCE(START_DATE, '2023-01-01')) AS JOB_DAY
    FROM job_history
    WHERE DEPARTMENT_ID = '30'
),
 all30 AS(
	SELECT EMPLOYEE_ID, SUM(JOB_DAY) AS SUM_JOB_DAY
    FROM job_30
    GROUP BY EMPLOYEE_ID

)
SELECT e.EMPLOYEE_ID, j.JOB_TITLE, SUM_JOB_DAY
FROM employees e 
LEFT JOIN all30 a ON e.EMPLOYEE_ID = a.EMPLOYEE_ID 
LEFT JOIN jobs j ON e.JOB_ID = j.JOB_ID
WHERE SUM_JOB_DAY IS NOT NULL;

-- 10
SELECT DEPARTMENT_NAME, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS MANAGER_NAME , l.CITY, c.COUNTRY_NAME
FROM departments d
LEFT JOIN employees e ON d.MANAGER_ID = e.EMPLOYEE_ID
LEFT JOIN locations l ON l.LOCATION_ID = d.LOCATION_ID
LEFT JOIN countries c ON c.COUNTRY_ID = l.COUNTRY_ID;

-- 11
SELECT d.DEPARTMENT_NAME,  AVG(e.SALARY)
FROM employees e
LEFT JOIN departments d ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
GROUP BY e.DEPARTMENT_ID;

-- 12 Re create jobs table
CREATE TABLE jobs (
	JOB_ID VARCHAR(20) PRIMARY KEY,
    JOB_TITLE VARCHAR(20),
	GRADE_LEVEL VARCHAR(1),
    CONSTRAINT FK_GradeOrder FOREIGN KEY (GRADE_LEVEL) REFERENCES job_grades(GRADE_LEVEL)
);

CREATE TABLE job_grades (
	GRADE_LEVEL VARCHAR(2) PRIMARY KEY,
    LOWEST_SAL INTEGER,
    HIGHEST_SAL INTEGER
);

    